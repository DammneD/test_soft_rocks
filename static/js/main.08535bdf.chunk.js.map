{"version":3,"sources":["api/users.ts","components/ModalWindow/ModalWindow.tsx","components/UserInfo/UserInfo.tsx","components/UserCreate/UserCreate.tsx","components/UserList/UserList.tsx","App.tsx","index.tsx"],"names":["USERS_URL","loadUsers","a","fetch","response","ok","Error","status","statusText","json","users","loadUser","id","user","uploadUser","upload","method","headers","body","JSON","stringify","updateUser","userData","update","ModalWindow","setPrevState","handleSubmit","deleteItem","setModalVisible","className","type","onClick","UserInfo","useState","name","username","email","phone","website","setUser","isModalVisible","isDisabled","setIsDisabled","temp","setTemp","changeButtonText","inputName","getUser","useEffect","handleChange","event","target","value","state","changeInput","to","onSubmit","preventDefault","htmlFor","disabled","onChange","Object","keys","length","UserCreate","getUsers","setName","setUserName","setMail","newUser","UserList","getUserId","setUsers","userId","setUserId","reverse","map","href","deleteUser","filter","person","App","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.08535bdf.chunk.js","sourcesContent":["import { CreatedUser, updatedUser, User } from \"../types\";\n\nconst USERS_URL = 'https://mate.academy/students-api/users';\n\nexport async function loadUsers():Promise<User[]> {\n  const response = await fetch(USERS_URL);\n\n  if (!response.ok) {\n    throw new Error(`Opps... ${response.status} - ${response.statusText}`);\n  }\n\n  const users = await response.json();\n\n  return users;\n};\n\nexport async function loadUser(id: number):Promise<User> {\n  const response = await fetch(`${USERS_URL}/${id}`);\n\n  if (!response.ok) {\n    throw new Error(`Opps... ${response.status} - ${response.statusText}`);\n  }\n\n  const user = await response.json();\n\n  return user;\n};\n\nexport async function uploadUser(user: CreatedUser) {\n  const upload = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(user)\n  }\n\n  await fetch(USERS_URL, upload);\n};\n\nexport async function deleteUser(id: number) {\n  await fetch(`${USERS_URL}/${id}`, {method: 'DELETE'});\n};\n\nexport async function updateUser(userData: updatedUser) {\n    const update = {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json; charset=UTF-8',\n      },\n      body: JSON.stringify(userData)\n    }\n  \n    await fetch(`${USERS_URL}/${userData.id}`, update);\n};\n","import React from \"react\";\nimport './ModalWindow.scss'\n\ninterface Props {\n  setModalVisible: (arg: boolean) => void;\n  deleteItem?: () => void;\n  handleSubmit?: () => void;\n  setPrevState?: () => void;\n}\n\nexport const ModalWindow: React.FC<Props> = ({ setPrevState, handleSubmit, deleteItem, setModalVisible }) => {\n\n  const handleYesClick = () => {\n    if (deleteItem) {\n      deleteItem();\n    }\n    if (handleSubmit) {\n      handleSubmit()\n    }\n  }\n\n  const handleNoClick = () => {\n    if (setPrevState) {\n      setPrevState()\n    }\n    setModalVisible(false)\n  }\n\n  return (\n    <div className=\"modal\">\n      <div className=\"modal__content\">\n        <h3>Are you shure?</h3>\n        <div className=\"modal__buttons\">\n          <button\n            type=\"button\"\n            onClick={handleYesClick}\n          >\n            Yes\n          </button>\n          <button\n            type=\"button\"\n            onClick={handleNoClick}\n          >\n            No\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { loadUser, updateUser } from '../../api/users';\nimport { User } from '../../types';\nimport { ModalWindow } from '../ModalWindow/ModalWindow';\nimport './UserInfo.scss'\n\ninterface Props {\n  id: number;\n}\n\ntype UserKey = 'name' | 'username' | 'email' | 'phone' | 'website';\n\nexport const UserInfo: React.FC<Props> = ({ id }) => {\n  const [user, setUser] = useState<User>({\n    id: id,\n    name: '',\n    username: '',\n    email: '',\n    phone: '',\n    website: '',\n  });\n  const [isModalVisible, setModalVisible] = useState(false);\n  const [isDisabled, setIsDisabled] = useState({\n    name: true,\n    username: true,\n    email: true,\n    phone: true,\n    website: true,\n  });\n  const [temp, setTemp] = useState({});\n  const changeButtonText = (inputName: UserKey) => isDisabled[inputName] ? 'Change' : 'Apply';\n\n  const getUser = async () => {\n    const user = await loadUser(id)\n    setUser({ ...user })\n  };\n\n  useEffect(() => {\n      getUser();\n  }, [])\n\n  const handleSubmit = () => {\n    updateUser({ \n      id, \n      name: user.name,\n      username: user.username,\n      email: user.email,\n      phone: user.phone,\n      website: user.website});\n    setModalVisible(false);\n  }\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const {name, value} = event.target;\n\n    setUser(state => ({ ...state, [name]: value }) )\n  }\n\n  const changeInput = (inputName: UserKey) => {\n    if (isDisabled[inputName]) {\n      setTemp({ [inputName]: user[inputName] })\n      setIsDisabled(state => ({ ...state, [inputName]: false }));\n    }\n    if (!isDisabled[inputName]) {\n      setModalVisible(true)\n      setIsDisabled(state => ({ ...state, [inputName]: true }));\n    }\n  }\n\n  const setPrevState = () => {\n    setUser(state => ({ ...state, ...temp}));\n    updateUser({\n      id,\n      ...temp\n    })\n  }\n\n  return (\n    <>\n      <h2>\n        <Link to=\"/test_soft_rocks/\">\n          Back\n        </Link>\n      </h2>\n    {user && <form\n      method=\"POST\"\n      className=\"info__form\"\n      onSubmit={(event => event.preventDefault())}\n    >\n      <label htmlFor=\"name\">\n        Name:\n        <input\n          id=\"userName\"\n          disabled={isDisabled.name}\n          name=\"name\"\n          type=\"text\"\n          value={user.name}\n          onChange={handleChange}\n        />\n        <button type=\"button\" onClick={() => changeInput(\"name\")}>\n          {changeButtonText(\"name\")}\n        </button>\n      </label>\n\n      <label htmlFor=\"username\">\n        Surname:\n        <input\n          disabled={isDisabled.username}\n          name=\"username\"\n          type=\"text\"\n          value={user.username}\n          onChange={handleChange}\n        />\n        <button type=\"button\" onClick={() => changeInput(\"username\")}>\n          {changeButtonText(\"username\")}\n        </button>\n      </label>\n\n      <label htmlFor=\"email\">\n        Email:\n        <input\n          disabled={isDisabled.email}\n          name=\"email\"\n          type=\"text\"\n          value={user.email}\n          onChange={handleChange}\n        />\n        <button type=\"button\" onClick={() => changeInput(\"email\")}>\n          {changeButtonText(\"email\")}\n        </button>\n      </label>\n\n      <label htmlFor=\"phone\">\n        Phone:\n        <input\n          disabled={isDisabled.phone}\n          name=\"phone\"\n          type=\"text\"\n          value={user.phone}\n          onChange={handleChange}\n        />\n        <button type=\"button\" onClick={() => changeInput(\"phone\")}>\n          {changeButtonText(\"phone\")}\n        </button>\n      </label>\n\n      <label htmlFor=\"website\">\n        Website:\n        <input\n          disabled={isDisabled.website}\n          name=\"website\"\n          type=\"text\"\n          value={user.website}\n          onChange={handleChange}\n        />\n        <button type=\"button\" onClick={() => changeInput(\"website\")}>\n          {changeButtonText(\"website\")}\n        </button>\n      </label>\n      <button\n        disabled={Object.keys(temp).length === 0}\n        type=\"button\"\n        onClick={setPrevState}\n      >\n        шаг назад\n      </button>\n    </form>}\n    {isModalVisible && <ModalWindow\n      setModalVisible={setModalVisible}\n      handleSubmit={handleSubmit}\n      setPrevState={setPrevState}\n    />}\n    </>\n  )\n}\n\n","import React, { useState } from 'react';\nimport { uploadUser } from '../../api/users';\n\ninterface Props {\n  getUsers: () => void;\n}\n\nexport const UserCreate: React.FC<Props> = ({ getUsers }) => {\n  const [name, setName] = useState('');\n  const [username, setUserName] = useState('');\n  const [email, setMail] = useState('');\n\n  const clearInput = () => {\n    setName('');\n    setUserName('');\n    setMail('');\n  }\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    const newUser = {\n      name,\n      username,\n      email,\n    };\n\n    event.preventDefault();\n    await uploadUser(newUser);\n    getUsers();\n    clearInput();\n  }\n\n  return (\n    <form\n        method=\"GET\"\n        className=\"addUserForm\"\n        onSubmit={handleSubmit}\n      >\n        <label htmlFor=\"name\">\n          Name:\n          <input\n            type=\"text\"\n            value={name}\n            onChange={(event) => setName(event.target.value)}\n          />\n        </label>\n\n        <label htmlFor=\"surname\">\n          Surname:\n          <input\n            type=\"text\"\n            value={username}\n            onChange={(event) => setUserName(event.target.value)}\n          />\n        </label>\n\n        <label htmlFor=\"mail\">\n          Mail:\n          <input\n            type=\"text\"\n            value={email}\n            onChange={(event) => setMail(event.target.value)}\n          />\n        </label>\n\n        <button type=\"submit\">\n          Add user\n        </button>\n      </form>\n  )\n}","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { deleteUser, loadUsers } from '../../api/users';\nimport { User } from '../../types';\nimport { ModalWindow } from '../ModalWindow/ModalWindow';\nimport { UserCreate } from '../UserCreate/UserCreate';\nimport './UserList.scss'\n\ninterface Props {\n  getUserId: (id: number) => void;\n}\n\nexport const UserList: React.FC<Props> = ({ getUserId }) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [isModalVisible, setModalVisible] = useState(false);\n  const [userId, setUserId] = useState(0);\n\n  const getUsers = async () => {\n    const users = await loadUsers()\n    setUsers(users.reverse())\n  };\n\n  useEffect(() => {\n    getUsers();\n  }, [])\n\n  const deleteItem = () => {\n    deleteUser(userId)\n    setUsers(users.filter(person => person.id !== userId))\n    setModalVisible(false)\n  }\n\n  const handleClick = (id: number) => {\n    setUserId(id)\n    setModalVisible(true)\n  }\n\n\n  return (\n    <div className=\"users\">\n      <UserCreate \n        getUsers={getUsers}\n      />\n      <ul className=\"users__list\">\n        {users.map(user => (\n          <li key={user.id}>\n            <h2>{user.name}</h2>\n            <a href={`mailto:${user.email}`}>\n                {user.email}\n            </a>\n              <Link\n                to={`/test_soft_rocks/user/${user.id}`}\n                onClick={() => getUserId(user.id)}\n              >\n                Learn more\n              </Link>\n            <button\n              type=\"button\"\n              onClick={() => handleClick(user.id)}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n      {isModalVisible && <ModalWindow\n        setModalVisible={setModalVisible}\n        deleteItem={deleteItem}\n      />}\n    </div>\n  )\n}\n","import React, { useState } from 'react';\nimport { Routes, Link, Route } from 'react-router-dom';\n\nimport './App.scss';\nimport { UserInfo } from './components/UserInfo/UserInfo';\nimport { UserList } from './components/UserList/UserList';\n\nexport const App: React.FC = () => {\n  const [userId, setUserId] = useState(0);\n\n  const handleClick = (id: number) => {\n    setUserId(id);\n  }\n\n  return (\n  <div>\n    <Routes>\n      <Route path=\"/test_soft_rocks/\" element={\n        <UserList\n          getUserId={handleClick}\n        />}\n      />\n      <Route path={`/test_soft_rocks/user/${userId}`} element={<UserInfo \n        id={userId}\n      />} />\n    </Routes>\n  </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}